---
layout: post
title: "如何读代码"
subtitle: '读代码'
author: "Jamke"
header-style: text
tags:
  - Read Code
  - Code Suggestion
  - Suggestion
---


## 目录
1. [为什么读代码](#为什么读代码)
2. [如何读代码](#如何读代码)
3. [读哪些代码](#读哪些代码)
4. [总结](#总结)

## 正文

---
##### 摘自[你会“读”代码吗？](https://zhuanlan.zhihu.com/p/45471785)

---
#### 为什么读代码
- 开发需要
1. 同事的代码
2. 第三方库和框架

- 学习和提升编程能力
1. 提高编程能力
2. 提高debug能力
3. 良好的代码风格：易读、易维护、易拓展
4. 与他人交流学习：读其他人的代码、开源项目

---
#### 如何读代码
- 有目的地读

> 初期：系统学习基础知识：语法、模块、函数、表达式、数据结构等

> 然后选择合适难度的、自己感兴趣的源码阅读，在精不在多

- 自上而下，由表及里

> 阅读外部库：
> 1. 读文档，了解解决了什么问题、有什么功能
> 2. 看示例代码，了解如何使用
> 3. 看源码
>> 1. 先看项目的文件结构、有哪些功能模块
>> 2. 再看类、函数的组织
>> 3. 最后才深入细节

- 了解基本的设计模式

> 推荐《Head First Design Pattern》。学习设计模式有助于理解别人的代码设计

- 选顺手的IDE

> 方便跳转函数定义、跳转函数调用、查找、断点等

- 尝试动手修改

> 设想某段代码的作用，通过修改运行验证。比简简单单地看一遍抄一遍好很多

- 默写，对比

> 当理解代码之后，把它关掉，尝试自己完完整整写一遍，完成后与源代码对比。这样能更好地理解整个代码的设计。

---
#### 读哪些代码
- 教程里的代码，从头到尾的示例代码都阅读、理解、写一遍运行
- 官方示例的代码，包括Quick Start、Tutorial之类的新手引导
- 内置代码
- 优秀的第三方库

---
### 总结
#### 不仅读，更要动手，边读边写边改，读完再默写，写完对比
